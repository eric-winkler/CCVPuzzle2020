@page "/CuminsLore"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using System.ComponentModel.DataAnnotations
@using PuzzleClient;
@inject HttpClient Http
@inject LocalStorage Storage
@inject NavigationManager NavigationManager

<p>Which of the following Cashies stories are true?</p>

@if (_stories == null)
{
    <p><em>Loading options...</em></p>
}
else
{
    <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
        <div>
            @foreach (var story in _stories)
            {
            <p>
                <input id="@story" type="checkbox" @bind="model.Answer[story]" />
                <label for="@story">@story</label>
            </p>
            }
        </div>
        <button type="submit">Submit</button>
    </EditForm>
}

@if (_isIncorrectAnswer)
{
    <div class="alert-danger">
        <h2>Try again!</h2>
    </div>
}


@code {
    private PuzzlePortal.Shared.TrueFalseListAnswerModel model;
    private bool _isIncorrectAnswer;
    private string[] _stories;

    protected override async Task OnInitializedAsync()
    {
        await LoadAnswerPossibilities();
    }

    private async Task HandleValidSubmit()
    {
        _isIncorrectAnswer = false;
        var message = new HttpRequestMessage
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri("api/CuminsLore/Answer", UriKind.Relative),
            Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(model), System.Text.Encoding.UTF8, "application/json")
        };
        message.AddAuth(Storage);

        var response = await Http.SendAsync(message);
        if (!response.EnsureAuthorized(NavigationManager))
            return;

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            await response.SaveAuth(Storage);
            NavigationManager.NavigateTo("progress");
        }
        else
        {
            _isIncorrectAnswer = true;
            Console.WriteLine("WRONG!");
            await LoadAnswerPossibilities();
        }
    }

    private async Task LoadAnswerPossibilities()
    {
        var message = new HttpRequestMessage
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri("api/CuminsLore/Question", UriKind.Relative)
        };
        message.AddAuth(Storage);

        var response = await Http.SendAsync(message);
        if (response.EnsureAuthorized(NavigationManager))
        {
            model = new PuzzlePortal.Shared.TrueFalseListAnswerModel();
            var stories = await response.ReadJsonResponse<string[]>();
            model.Answer = stories.ToDictionary(s => s, s => false);
            _stories = stories;
        }
    }
}