@page "/progress"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using PuzzleClient;
@inject HttpClient Http
@inject LocalStorage Storage
@inject NavigationManager NavigationManager


@if (string.IsNullOrWhiteSpace(TeamName))
{
<div id="unregistered">
    <h1>Progress Check</h1>
    <p>
        It looks like you haven't even started yet! Are you ready? <a href="registration">let's go!</a>
    </p>
</div>
}

@if(!string.IsNullOrWhiteSpace(TeamName))
{
<div id="registered">
    <h1>Welcome @TeamName</h1>
    <p>
        Here's what you've accomplished so far:
    </p>
    <p>
        @{
            if (CompletedPuzzles?.Any() == true)
            {
                <ul>
                    @foreach (var p in CompletedPuzzles)
                    {
                        <li>@PuzzlePortal.Shared.Puzzle.ById[p].Name</li>
                    }
                </ul>
            }
            else
            {
                <div>Zip, nada, nothing.</div>
            }
        }
    </p>
</div>
}

@if (IsFinished)
{
<div id="finished" class="alert-success">
    <p>
        Congrats, you're done!
    </p>
    <p>
        Here's your <a href="Validation?code=@System.Web.HttpUtility.UrlEncode(System.Text.Json.JsonSerializer.Serialize(scoreSheet))">proof</a>
    </p>
    <div class="container">
        <samp>@System.Text.Json.JsonSerializer.Serialize(scoreSheet)</samp>
    </div>
</div>
}
else
{
<div id="unfinished">
    <p>
        You should try to <a href="@CurrentPuzzle">solve a puzzle</a>.
    </p>
</div>
}


@code {
    private string TeamName;
    private string CurrentPuzzle;
    private Guid[] CompletedPuzzles;
    private bool IsFinished;

    private PuzzlePortal.Shared.ScoreSheetModel scoreSheet;

    protected override async Task OnInitializedAsync()
    {
        scoreSheet = Storage.GetItem<PuzzlePortal.Shared.ScoreSheetModel>("scoreSheet");
        if (scoreSheet == null)
        {
            Console.WriteLine("No active scoresheet!");
            return;
        }

        var message = new HttpRequestMessage
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri("api/ScoreSheet", UriKind.Relative)
        };
        message.AddAuth(Storage);

        var response = await Http.SendAsync(message);
        if(response.EnsureAuthorized(NavigationManager))
        {
            TeamName = scoreSheet.Name;
            CurrentPuzzle = PuzzlePortal.Shared.Puzzle.ById[scoreSheet.CurrentPuzzle].Name;
            CompletedPuzzles = scoreSheet.CompletedPuzzles;
            IsFinished = !PuzzlePortal.Shared.Puzzle.Ids.Except(scoreSheet.CompletedPuzzles).Any();
        }
    }
}
