@page "/progress"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@inject HttpClient Http
@inject LocalStorage Storage
@inject NavigationManager NavigationManager

<div id="unregistered" style="@(string.IsNullOrWhiteSpace(TeamName) ? "display:block" : "display:none")">
    <h1>Progress Check</h1>
    <p>
        It looks like you haven't even started yet! Are you ready? <a href="registration">let's go!</a>
    </p>
</div>

<div id="registered" style="@(!string.IsNullOrWhiteSpace(TeamName) ? "display:block" : "display:none")">
    <h1>Welcome @TeamName</h1>
    <p>
        Here's what you've accomplished so far:
    </p>
    <p>
        @{
            if (CompletedPuzzles?.Any() == true)
            {
                <ul>
                    @foreach (var p in CompletedPuzzles)
                    {
                    <li>@PuzzlePortal.Shared.Puzzle.ById[p].Name</li>
                    }
                </ul>
            }
            else
            {
                <div>Zip, nada, nothing.</div>
            }
        }
    </p>

    <div id="finished" style="@(IsFinished ? "display:block" : "display:none")">
        <p>
            Congrats, you're done!
        </p>
        <p>
            Here's your <a href="Validation?code=@System.Web.HttpUtility.UrlEncode(System.Text.Json.JsonSerializer.Serialize(scoreSheet))">proof</a>
        </p>
        <div class="container">
            <samp>@System.Text.Json.JsonSerializer.Serialize(scoreSheet)</samp>
        </div>
    </div>
    <div id="unfinished" style="@(!IsFinished ? "display:block" : "display:none")">
        <p>
            You should try to <a href="@CurrentPuzzle">solve a puzzle</a>.
        </p>
    </div>
</div>

@code {
    private string TeamName;
    private string CurrentPuzzle;
    private Guid[] CompletedPuzzles;
    private bool IsFinished;

    private PuzzlePortal.Shared.ScoreSheetModel scoreSheet;

    protected override async Task OnInitializedAsync()
    {
        scoreSheet = Storage.GetItem<PuzzlePortal.Shared.ScoreSheetModel>("scoreSheet");
        if (scoreSheet == null)
        {
            Console.WriteLine("No active scoresheet!");
        }
        else
        {
            Console.WriteLine($"Loaded scoresheet for {scoreSheet.Name}");
            var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(scoreSheet), System.Text.Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("api/ScoreSheet", content);
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("https://www.youtube.com/watch?v=dQw4w9WgXcQ");
            }
            else
            {
                TeamName = scoreSheet.Name;
                CurrentPuzzle = PuzzlePortal.Shared.Puzzle.ById[scoreSheet.CurrentPuzzle].Name;
                CompletedPuzzles = scoreSheet.CompletedPuzzles;
                IsFinished = !PuzzlePortal.Shared.Puzzle.Ids.Except(scoreSheet.CompletedPuzzles).Any();
            }
        }
    }
}
